name: APK Modifier - Simple & Reliable

on:
  workflow_dispatch:
    inputs:
      apk_file:
        description: 'Name of the APK file to modify (should be in apk/ folder)'
        required: true
        default: 'Dynamic-TV.apk'
        type: string
      new_package_name:
        description: 'New package name'
        required: true
        default: 'com.sitv.live'
        type: string
      new_app_name:
        description: 'New app name'
        required: true
        default: 'SI TV'
        type: string
      panel_url_value:
        description: 'Panel URL value (replaces "dynam" in URLs)'
        required: true
        default: 'sitv'
        type: string

jobs:
  modify-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y aapt zipalign
        
        echo "Installing apktool..."
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar
        
        apktool --version

    - name: Generate keystore for signing
      run: |
        echo "Generating keystore for APK signing..."
        keytool -genkey -v -keystore release-key.keystore -alias alias_name \
          -keyalg RSA -keysize 2048 -validity 10000 \
          -storepass password -keypass password \
          -dname "CN=GitHub Action, OU=CI, O=GitHub, L=GitHub, S=GitHub, C=US"
        
        echo "Keystore generated successfully"

    - name: Verify APK file exists
      run: |
        echo "Checking for APK file..."
        if [ ! -f "apk/${{ github.event.inputs.apk_file }}" ]; then
          echo "ERROR: APK file apk/${{ github.event.inputs.apk_file }} not found"
          echo "Available files in apk/ directory:"
          ls -la apk/ || echo "apk/ directory not found"
          exit 1
        fi
        echo "Found APK file: apk/${{ github.event.inputs.apk_file }}"
        ls -lh "apk/${{ github.event.inputs.apk_file }}"

    - name: Decompile APK with Full Source - NO EARLY CLEANUP
      run: |
        echo "üö® CRITICAL: Decompiling with FULL source preservation - NO early cleanup!"
        echo "Decompiling apk/${{ github.event.inputs.apk_file }} with COMPLETE source for maximum compatibility..."
        
        # IMPORTANT: Full decompilation with ALL files preserved
        if ! apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force; then
          echo "Standard decompilation failed, trying with --only-main-classes..."
          if ! apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --only-main-classes; then
            echo "Trying basic decompilation without debug info..."
            apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --no-debug-info
          fi
        fi
        
        if [ ! -d "decompiled_apk" ]; then
          echo "ERROR: APK decompilation failed completely"
          exit 1
        fi
        
        echo "‚úÖ APK decompiled successfully with ALL files preserved"
        echo "üìä Decompiled APK structure:"
        find decompiled_apk -maxdepth 2 -type d | sort
        
        # Verify smali files were generated
        SMALI_COUNT=$(find decompiled_apk -name "*.smali" | wc -l)
        echo "üìä Total smali files generated: $SMALI_COUNT"
        
        if [ "$SMALI_COUNT" -eq 0 ]; then
          echo "‚ö†Ô∏è WARNING: No smali files generated - URL replacement may not work"
        else
          echo "‚úÖ Smali files generated successfully - ALL CLASSES PRESERVED"
        fi
        
        echo ""
        echo "üö® IMPORTANT: NO duplicate class cleanup at this stage!"
        echo "üö® ALL files preserved to maintain app functionality!"

    - name: üéØ SIMPLE REBRANDKING URL REPLACEMENT
      run: |
        NEW_PANEL_VALUE="${{ github.event.inputs.panel_url_value }}"
        
        echo "üéØ SIMPLE REBRANDKING URL REPLACEMENT"
        echo "============================================================"
        echo "Target: dynam ‚Üí $NEW_PANEL_VALUE"
        echo ""
        
        # Define URLs with exact patterns
        OLD_URL1="https://rebrandking.com/panels/SM4trio/dynam/"
        OLD_URL2="https://rebrandking.com/panels/SM4trio/dynam/api/"
        
        NEW_URL1="https://rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE/"
        NEW_URL2="https://rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE/api/"
        
        echo "URLs to replace:"
        echo "  FROM: '$OLD_URL1' ‚Üí TO: '$NEW_URL1'"
        echo "  FROM: '$OLD_URL2' ‚Üí TO: '$NEW_URL2'"
        echo ""
        
        # Find all files with rebrandking URLs
        echo "üîç Finding files with rebrandking URLs..."
        find decompiled_apk -name "*.smali" -exec grep -l "rebrandking.com/panels/SM4trio/dynam" {} \; > rebrand_files.txt 2>/dev/null || true
        
        if [ ! -s rebrand_files.txt ]; then
          echo "‚ùå ERROR: No files found containing rebrandking URLs!"
          echo "üîç Searching for any rebrandking references..."
          find decompiled_apk -name "*.smali" -exec grep -l "rebrandking" {} \; 2>/dev/null | head -10
          exit 1
        fi
        
        echo "üìã Found files with rebrandking URLs:"
        cat rebrand_files.txt
        echo ""
        
        # Count URLs before replacement
        BEFORE_COUNT=$(find decompiled_apk -name "*.smali" -exec grep -c "rebrandking.com/panels/SM4trio/dynam" {} \; 2>/dev/null | awk '{sum += $1} END {print sum+0}')
        echo "üìä URLs found before replacement: $BEFORE_COUNT"
        
        # Process each file
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "Processing: $file"
            
            # Show before
            grep -n "rebrandking.com/panels/SM4trio/dynam" "$file" 2>/dev/null | head -2
            
            # Replace URLs using pipe delimiter
            sed -i "s|$OLD_URL1|$NEW_URL1|g" "$file"
            sed -i "s|$OLD_URL2|$NEW_URL2|g" "$file"
            
            echo "‚úÖ Processed $file"
          fi
        done < rebrand_files.txt
        
        # Count URLs after replacement
        AFTER_OLD_COUNT=$(find decompiled_apk -name "*.smali" -exec grep -c "rebrandking.com/panels/SM4trio/dynam" {} \; 2>/dev/null | awk '{sum += $1} END {print sum+0}')
        AFTER_NEW_COUNT=$(find decompiled_apk -name "*.smali" -exec grep -c "rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE" {} \; 2>/dev/null | awk '{sum += $1} END {print sum+0}')
        
        echo ""
        echo "üìä REPLACEMENT SUMMARY"
        echo "============================================================"
        echo "URLs before replacement: $BEFORE_COUNT"
        echo "Old URLs remaining: $AFTER_OLD_COUNT"
        echo "New URLs created: $AFTER_NEW_COUNT"
        
        if [ "$AFTER_OLD_COUNT" -eq 0 ] && [ "$AFTER_NEW_COUNT" -gt 0 ]; then
          echo ""
          echo "üéâ SUCCESS! All rebrandking URLs successfully replaced!"
          echo "‚úÖ Total URLs replaced: $AFTER_NEW_COUNT"
        elif [ "$AFTER_NEW_COUNT" -gt 0 ]; then
          echo ""
          echo "‚úÖ PARTIAL SUCCESS: $AFTER_NEW_COUNT URLs replaced"
          if [ "$AFTER_OLD_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è Note: $AFTER_OLD_COUNT old URLs still remain"
          fi
        else
          echo ""
          echo "‚ùå ERROR: No URL replacements were successful"
        fi
        
        # Cleanup temp file
        rm -f rebrand_files.txt
        
        echo ""
        echo "üéØ URL REPLACEMENT COMPLETE - ALL FILES PRESERVED"
        echo "============================================================"

    - name: Replace package name in smali files
      run: |
        OLD_PACKAGE="com.dynamic.tv"
        OLD_PACKAGE_B64="Y29tLmR5bmFtaWMudHY="
        NEW_PACKAGE="${{ github.event.inputs.new_package_name }}"
        NEW_PACKAGE_B64=$(echo -n "$NEW_PACKAGE" | base64 -w 0)
        
        echo "Replacing package name:"
        echo "  Old: $OLD_PACKAGE"
        echo "  New: $NEW_PACKAGE"
        
        SMALI_COUNT=$(find decompiled_apk -name "*.smali" -type f | wc -l)
        echo "Processing $SMALI_COUNT smali files..."
        
        # Use more specific sed commands to avoid conflicts
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|L$OLD_PACKAGE|L$NEW_PACKAGE|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|\"$OLD_PACKAGE\"|\"$NEW_PACKAGE\"|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$OLD_PACKAGE_B64|$NEW_PACKAGE_B64|g" {} \;
        
        OLD_PATH=$(echo "$OLD_PACKAGE" | tr '.' '/')
        NEW_PATH=$(echo "$NEW_PACKAGE" | tr '.' '/')
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$OLD_PATH|$NEW_PATH|g" {} \;
        
        if [ -f "decompiled_apk/AndroidManifest.xml" ]; then
          sed -i "s|$OLD_PACKAGE|$NEW_PACKAGE|g" decompiled_apk/AndroidManifest.xml
          echo "Updated AndroidManifest.xml"
        fi
        
        if [ -f "decompiled_apk/apktool.yml" ]; then
          sed -i "s|$OLD_PACKAGE|$NEW_PACKAGE|g" decompiled_apk/apktool.yml
          echo "Updated apktool.yml"
        fi
        
        echo "Package name replacement completed"

    - name: Replace app name in smali files
      run: |
        OLD_APP_NAME="Dynamic TV"
        OLD_APP_NAME_B64="RHluYW1pYyBUVg=="
        NEW_APP_NAME="${{ github.event.inputs.new_app_name }}"
        NEW_APP_NAME_B64=$(echo -n "$NEW_APP_NAME" | base64 -w 0)
        
        echo "Replacing app name:"
        echo "  Old: $OLD_APP_NAME"
        echo "  New: $NEW_APP_NAME"
        
        # Use quotes to ensure exact matches
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|\"$OLD_APP_NAME\"|\"$NEW_APP_NAME\"|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$OLD_APP_NAME_B64|$NEW_APP_NAME_B64|g" {} \;
        
        STRINGS_COUNT=$(find decompiled_apk -name "strings.xml" -type f | wc -l)
        if [ $STRINGS_COUNT -gt 0 ]; then
          echo "Updating $STRINGS_COUNT strings.xml files..."
          find decompiled_apk -name "strings.xml" -type f -exec sed -i "s|$OLD_APP_NAME|$NEW_APP_NAME|g" {} \;
        fi
        
        if [ -f "decompiled_apk/AndroidManifest.xml" ]; then
          sed -i "s|android:label=\"$OLD_APP_NAME\"|android:label=\"$NEW_APP_NAME\"|g" decompiled_apk/AndroidManifest.xml
          sed -i "s|$OLD_APP_NAME|$NEW_APP_NAME|g" decompiled_apk/AndroidManifest.xml
          echo "Updated AndroidManifest.xml app label"
        fi
        
        echo "App name replacement completed"

    - name: Replace image files
      run: |
        echo "Looking for image files to replace..."
        
        if [ ! -d "images-to-replace" ]; then
          echo "ERROR: images-to-replace directory not found"
          exit 1
        fi
        
        echo "Available replacement images:"
        ls -la images-to-replace/
        
        declare -a images=(
          "banner.png"
          "brick.jpg"
          "full_white_logo.png"
          "ic_launcher.png"
          "launcher_logo.png"
          "logo.png"
          "logo_blue_long.png"
          "logo_greu.png"
          "logo_home.png"
          "logo_placeholder_white.png"
          "logo_watermark.png"
          "logo_white.png"
          "logo_white_long.png"
          "tv_banner.png"
          "your_logo.png"
        )
        
        for image in "${images[@]}"; do
          echo "Processing $image..."
          
          targets=$(find decompiled_apk -name "$image" -type f)
          if [ -n "$targets" ] && [ -f "images-to-replace/$image" ]; then
            echo "$targets" | while read -r target_path; do
              echo "  Replacing: $target_path"
              cp "images-to-replace/$image" "$target_path"
            done
          elif [ ! -f "images-to-replace/$image" ]; then
            echo "  Source image images-to-replace/$image not found"
          else
            echo "  Target image $image not found in APK"
          fi
        done
        
        echo "Image replacement completed"

    - name: Update package directory structure
      run: |
        echo "Updating package directory structure..."
        
        # Update package structure for the new package name
        OLD_PACKAGE_PATH="com/dynamic/tv"
        NEW_PACKAGE_PATH=$(echo "${{ github.event.inputs.new_package_name }}" | tr '.' '/')
        
        for smali_dir in decompiled_apk/smali decompiled_apk/smali_classes*; do
          if [ -d "$smali_dir" ]; then
            old_path="$smali_dir/$OLD_PACKAGE_PATH"
            if [ -d "$old_path" ]; then
              echo "Moving package structure in $smali_dir..."
              new_path="$smali_dir/$NEW_PACKAGE_PATH"
              mkdir -p "$(dirname "$new_path")"
              mv "$old_path" "$new_path"
              
              # Clean up empty directories
              rmdir -p "$smali_dir/com/dynamic" 2>/dev/null || true
              echo "Package structure updated in $smali_dir"
            fi
          fi
        done
        
        echo "Package directory structure update completed"

    - name: üßπ MINIMAL CLEANUP - Only before rebuild
      run: |
        echo "üßπ MINIMAL CLEANUP: Only removing true duplicates before APK rebuild"
        echo "============================================================"
        
        cd decompiled_apk
        
        # Remove any .orig files that might have been created during editing
        orig_count=$(find . -name "*.orig" | wc -l)
        if [ "$orig_count" -gt 0 ]; then
          echo "üóëÔ∏è Removing $orig_count .orig files..."
          find . -name "*.orig" -delete
        fi
        
        # Remove empty directories
        echo "üóëÔ∏è Removing empty directories..."
        find . -type d -empty -delete 2>/dev/null || true
        
        cd ..
        
        echo "‚úÖ Minimal cleanup completed - ALL essential files preserved!"

    - name: Fix APK compilation issues
      run: |
        echo "Preparing APK for recompilation..."
        
        cd decompiled_apk
        
        # Fix common apktool compilation issues
        echo "Fixing apktool.yml configuration..."
        if [ -f "apktool.yml" ]; then
          # Ensure proper configuration for recompilation
          sed -i 's/doNotCompress:/# doNotCompress:/g' apktool.yml
          sed -i 's/unknownFiles:/# unknownFiles:/g' apktool.yml
          
          # Add compression settings to avoid issues
          echo "" >> apktool.yml
          echo "# Modified for recompilation" >> apktool.yml
          echo "doNotCompress:" >> apktool.yml
          echo "- resources.arsc" >> apktool.yml
        fi
        
        # Remove any problematic META-INF files
        if [ -d "original/META-INF" ]; then
          echo "Cleaning META-INF directory..."
          rm -rf original/META-INF/*.RSA
          rm -rf original/META-INF/*.SF
          rm -rf original/META-INF/MANIFEST.MF
        fi
        
        cd ..
        echo "APK preparation completed"

    - name: Recompile APK
      run: |
        echo "Recompiling APK with all preserved files..."
        
        # Try recompilation with different options
        if ! apktool b decompiled_apk -o modified_unsigned.apk --use-aapt2; then
          echo "AAPT2 failed, trying with AAPT1..."
          if ! apktool b decompiled_apk -o modified_unsigned.apk; then
            echo "Standard compilation failed, trying without compression..."
            apktool b decompiled_apk -o modified_unsigned.apk --no-crunch
          fi
        fi
        
        if [ ! -f "modified_unsigned.apk" ]; then
          echo "ERROR: APK compilation failed completely"
          echo "Checking decompiled directory structure..."
          ls -la decompiled_apk/
          exit 1
        fi
        
        echo "‚úÖ APK compiled successfully with all connectivity files preserved"
        ls -lh modified_unsigned.apk

    - name: Sign APK
      run: |
        echo "Signing APK..."
        
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
          -keystore release-key.keystore -storepass password \
          modified_unsigned.apk alias_name
        
        if [ $? -ne 0 ]; then
          echo "ERROR: APK signing failed"
          exit 1
        fi
        
        zipalign -v 4 modified_unsigned.apk modified_signed_aligned.apk
        
        if [ $? -ne 0 ]; then
          echo "ERROR: APK alignment failed"
          exit 1
        fi
        
        echo "APK signed and aligned successfully"
        ls -lh modified_signed_aligned.apk

    - name: Verify APK
      run: |
        echo "Verifying APK..."
        jarsigner -verify -verbose -certs modified_signed_aligned.apk
        
        if [ $? -eq 0 ]; then
          echo "APK signature verification successful"
        else
          echo "APK signature verification failed, but APK may still be usable"
        fi
        
        echo "APK Information:"
        aapt dump badging modified_signed_aligned.apk | head -10 || echo "Could not get APK info"

    - name: Create output directory and organize files
      run: |
        echo "Organizing output files..."
        mkdir -p output
        cp modified_signed_aligned.apk output/
        cp modified_unsigned.apk output/
        
        cat > output/modification_summary.txt << EOF
        APK Modification Summary - SIMPLE & RELIABLE
        =============================================
        Original APK: ${{ github.event.inputs.apk_file }}
        Modified APK: modified_signed_aligned.apk

        üö® CONNECTIVITY PRESERVATION:
        - NO early duplicate class cleanup performed
        - ALL files preserved during decompilation
        - Simple URL replacement without complex arithmetic
        - Minimal cleanup only before final rebuild
        - Maximum compatibility for internet connectivity

        Changes Made:
        - Package Name: com.dynamic.tv ‚Üí ${{ github.event.inputs.new_package_name }}
        - App Name: Dynamic TV ‚Üí ${{ github.event.inputs.new_app_name }}
        - Panel URLs: Simple rebrandking URL replacement (/dynam/ ‚Üí /${{ github.event.inputs.panel_url_value }}/)
        - Images: Replaced with assets from images-to-replace/ folder
        - APK: Recompiled and signed with all connectivity files preserved

        Files Generated:
        - modified_signed_aligned.apk (Ready for installation with connectivity)
        - modified_unsigned.apk (Unsigned version)

        Generated on: $(date)
        Generated by: GitHub Actions - Simple & Reliable Mode
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        EOF
        
        echo "Files organized in output/ directory:"
        ls -la output/

    - name: Upload modified APK
      uses: actions/upload-artifact@v4
      with:
        name: modified-apk-simple-reliable-${{ github.run_number }}
        path: output/
        retention-days: 30

    - name: Show summary
      run: |
        echo "## üéâ APK Modification Complete - Simple & Reliable!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Fixed Issues:" >> $GITHUB_STEP_SUMMARY
        echo "- **NO Complex Arithmetic:** Eliminated shell script counting errors" >> $GITHUB_STEP_SUMMARY
        echo "- **Simple URL Replacement:** Reliable processing without subshell issues" >> $GITHUB_STEP_SUMMARY
        echo "- **ALL Files Preserved:** No early cleanup to maintain connectivity" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changes Made:" >> $GITHUB_STEP_SUMMARY
        echo "- **Original APK:** ${{ github.event.inputs.apk_file }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Name:** com.dynamic.tv ‚Üí ${{ github.event.inputs.new_package_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **App Name:** Dynamic TV ‚Üí ${{ github.event.inputs.new_app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Panel URLs:** üéØ Simple rebrandking replacement (/dynam/ ‚Üí /${{ github.event.inputs.panel_url_value }}/)" >> $GITHUB_STEP_SUMMARY
        echo "- **Images:** Replaced with provided assets" >> $GITHUB_STEP_SUMMARY
        echo "- **Connectivity:** ‚úÖ ALL network files preserved" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Output Files:" >> $GITHUB_STEP_SUMMARY
        echo "- **Signed APK:** modified_signed_aligned.apk" >> $GITHUB_STEP_SUMMARY
        echo "- **Unsigned APK:** modified_unsigned.apk" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download:" >> $GITHUB_STEP_SUMMARY
        echo "The modified APK has been uploaded as workflow artifact **modified-apk-simple-reliable-${{ github.run_number }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Ready for installation with internet connectivity preserved!**" >> $GITHUB_STEP_SUMMARY
