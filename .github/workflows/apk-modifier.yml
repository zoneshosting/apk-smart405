name: APK Modifier

on:
  workflow_dispatch:
    inputs:
      apk_file:
        description: 'Name of the APK file to modify (should be in apk/ folder)'
        required: true
        default: 'Dynamic-TV.apk'
        type: string
      new_package_name:
        description: 'New package name'
        required: true
        default: 'com.sitv.live'
        type: string
      new_app_name:
        description: 'New app name'
        required: true
        default: 'SI TV'
        type: string
      panel_url_value:
        description: 'Panel URL value (replaces "dynam" in URLs)'
        required: true
        default: 'sitv'
        type: string

jobs:
  modify-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y aapt zipalign
        
        echo "Installing apktool..."
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar
        
        apktool --version

    - name: Generate keystore for signing
      run: |
        echo "Generating keystore for APK signing..."
        keytool -genkey -v -keystore release-key.keystore -alias alias_name \
          -keyalg RSA -keysize 2048 -validity 10000 \
          -storepass password -keypass password \
          -dname "CN=GitHub Action, OU=CI, O=GitHub, L=GitHub, S=GitHub, C=US"
        
        echo "Keystore generated successfully"

    - name: Verify APK file exists
      run: |
        echo "Checking for APK file..."
        if [ ! -f "apk/${{ github.event.inputs.apk_file }}" ]; then
          echo "ERROR: APK file apk/${{ github.event.inputs.apk_file }} not found"
          echo "Available files in apk/ directory:"
          ls -la apk/ || echo "apk/ directory not found"
          exit 1
        fi
        echo "Found APK file: apk/${{ github.event.inputs.apk_file }}"
        ls -lh "apk/${{ github.event.inputs.apk_file }}"

    - name: Decompile APK
      run: |
        echo "Decompiling apk/${{ github.event.inputs.apk_file }}..."
        
        # Try with different apktool options to handle complex APKs
        if ! apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --no-src; then
          echo "Standard decompilation failed, trying with --only-main-classes..."
          if ! apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --only-main-classes; then
            echo "Trying basic decompilation without source..."
            apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --no-debug-info
          fi
        fi
        
        if [ ! -d "decompiled_apk" ]; then
          echo "ERROR: APK decompilation failed completely"
          exit 1
        fi
        
        echo "APK decompiled successfully"
        echo "Decompiled APK structure:"
        find decompiled_apk -maxdepth 2 -type d | sort

    - name: Clean duplicate classes
      run: |
        echo "Checking for and cleaning duplicate classes..."
        
        # Find potential duplicate smali files
        cd decompiled_apk
        
        # Remove duplicate Facebook Ads SDK files that might cause conflicts
        if [ -d "smali/com/facebook/ads" ]; then
          echo "Found Facebook Ads SDK, checking for duplicates..."
          
          # Look for duplicate classes in different smali folders
          for class_file in $(find smali/com/facebook/ads -name "*.smali" -type f); do
            relative_path=$(echo "$class_file" | sed 's|^smali/||')
            
            # Check if this class exists in other smali folders
            for smali_dir in smali_classes*; do
              if [ -d "$smali_dir" ] && [ -f "$smali_dir/$relative_path" ]; then
                echo "Removing duplicate: $smali_dir/$relative_path"
                rm -f "$smali_dir/$relative_path"
              fi
            done
          done
        fi
        
        # Remove any .orig files that might have been created
        find . -name "*.orig" -delete
        
        cd ..
        echo "Duplicate class cleanup completed"

    - name: Explicit character-exact panel URL replacement
      run: |
        NEW_PANEL_VALUE="${{ github.event.inputs.panel_url_value }}"
        
        echo "============================================================"
        echo "EXPLICIT CHARACTER-EXACT URL REPLACEMENT"
        echo "============================================================"
        echo "Target: dynam → $NEW_PANEL_VALUE"
        echo "Using exact character matching (forward slashes /dynam/, not \dynam\)"
        echo ""
        
        # Define URLs with explicit forward slashes as they appear in smali files
        URL1="https://rebrandking.com/panels/SM4trio/dynam/"
        URL2="https://rebrandking.com/panels/SM4trio/dynam/api/"
        
        # New URLs with replacement value
        NEW_URL1="https://rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE/"
        NEW_URL2="https://rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE/api/"
        
        echo "Exact URLs to find (with forward slashes as stored in smali):"
        echo "1. '$URL1'"
        echo "2. '$URL2'"
        echo ""
        echo "Replacement URLs:"
        echo "1. '$NEW_URL1'"
        echo "2. '$NEW_URL2'"
        echo ""
        
        echo "🔍 Character-by-character search in all smali files..."
        echo ""
        
        # Search for URL1 (without /api/) - exact character match
        echo "Searching for URL1: $URL1"
        URL1_FILES=$(find decompiled_apk -name "*.smali" -type f -exec grep -l "$URL1" {} \; 2>/dev/null || true)
        
        if [ -n "$URL1_FILES" ]; then
          URL1_COUNT=$(echo "$URL1_FILES" | wc -l)
          echo "✅ Found URL1 in $URL1_COUNT files:"
          echo "$URL1_FILES"
          echo ""
          echo "Exact content found:"
          echo "$URL1_FILES" | while read -r file; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              grep -n "$URL1" "$file" 2>/dev/null || true
            fi
          done
        else
          echo "❌ URL1 not found"
          URL1_COUNT=0
        fi
        
        echo ""
        
        # Search for URL2 (with /api/) - exact character match  
        echo "Searching for URL2: $URL2"
        URL2_FILES=$(find decompiled_apk -name "*.smali" -type f -exec grep -l "$URL2" {} \; 2>/dev/null || true)
        
        if [ -n "$URL2_FILES" ]; then
          URL2_COUNT=$(echo "$URL2_FILES" | wc -l)
          echo "✅ Found URL2 in $URL2_COUNT files:"
          echo "$URL2_FILES"
          echo ""
          echo "Exact content found:"
          echo "$URL2_FILES" | while read -r file; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              grep -n "$URL2" "$file" 2>/dev/null || true
            fi
          done
        else
          echo "❌ URL2 not found"
          URL2_COUNT=0
        fi
        
        echo ""
        echo "============================================================"
        echo "CHARACTER-EXACT REPLACEMENTS"
        echo "============================================================"
        
        TOTAL_REPLACED=0
        
        # Replace URL1 with explicit character handling
        if [ "$URL1_COUNT" -gt 0 ]; then
          echo "🔄 Replacing URL1 (character-exact)..."
          echo "  From: '$URL1'"
          echo "  To:   '$NEW_URL1'"
          
          # Use | as delimiter to avoid issues with / characters
          find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$URL1|$NEW_URL1|g" {} \;
          TOTAL_REPLACED=$((TOTAL_REPLACED + URL1_COUNT))
          echo "  ✅ Processed $URL1_COUNT files"
        fi
        
        # Replace URL2 with explicit character handling
        if [ "$URL2_COUNT" -gt 0 ]; then
          echo "🔄 Replacing URL2 (character-exact)..."
          echo "  From: '$URL2'"
          echo "  To:   '$NEW_URL2'"
          
          # Use | as delimiter to avoid issues with / characters
          find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$URL2|$NEW_URL2|g" {} \;
          TOTAL_REPLACED=$((TOTAL_REPLACED + URL2_COUNT))
          echo "  ✅ Processed $URL2_COUNT files"
        fi
        
        echo ""
        echo "============================================================"
        echo "VERIFICATION WITH EXACT CHARACTER MATCHING"
        echo "============================================================"
        
        # Verify URL1 replacements with exact matching
        echo "🔍 Verifying URL1 replacements..."
        NEW_URL1_FILES=$(find decompiled_apk -name "*.smali" -type f -exec grep -l "$NEW_URL1" {} \; 2>/dev/null || true)
        
        if [ -n "$NEW_URL1_FILES" ]; then
          NEW_URL1_COUNT=$(echo "$NEW_URL1_FILES" | wc -l)
          echo "✅ Found $NEW_URL1_COUNT files with new URL1:"
          echo "$NEW_URL1_FILES" | head -3
          echo ""
          echo "Sample new content:"
          echo "$NEW_URL1_FILES" | head -1 | while read -r file; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              grep -n "$NEW_URL1" "$file" 2>/dev/null || true
            fi
          done
        else
          NEW_URL1_COUNT=0
          echo "❌ No files found with new URL1"
        fi
        
        echo ""
        
        # Verify URL2 replacements with exact matching
        echo "🔍 Verifying URL2 replacements..."
        NEW_URL2_FILES=$(find decompiled_apk -name "*.smali" -type f -exec grep -l "$NEW_URL2" {} \; 2>/dev/null || true)
        
        if [ -n "$NEW_URL2_FILES" ]; then
          NEW_URL2_COUNT=$(echo "$NEW_URL2_FILES" | wc -l)
          echo "✅ Found $NEW_URL2_COUNT files with new URL2:"
          echo "$NEW_URL2_FILES" | head -3
          echo ""
          echo "Sample new content:"
          echo "$NEW_URL2_FILES" | head -1 | while read -r file; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              grep -n "$NEW_URL2" "$file" 2>/dev/null || true
            fi
          done
        else
          NEW_URL2_COUNT=0
          echo "❌ No files found with new URL2"
        fi
        
        echo ""
        echo "============================================================"
        echo "FINAL SUMMARY"
        echo "============================================================"
        
        TOTAL_ORIGINAL=$((URL1_COUNT + URL2_COUNT))
        TOTAL_NEW=$((NEW_URL1_COUNT + NEW_URL2_COUNT))
        
        echo "Original URLs found: $TOTAL_ORIGINAL"
        echo "New URLs created: $TOTAL_NEW"
        echo ""
        
        if [ "$TOTAL_NEW" -eq 8 ]; then
          echo "🎯 PERFECT: Exactly 8 URLs replaced as expected!"
        elif [ "$TOTAL_NEW" -gt 0 ]; then
          echo "✅ SUCCESS: $TOTAL_NEW URLs replaced!"
        else
          echo "❌ ERROR: No URLs were replaced"
          echo ""
          echo "🔧 TROUBLESHOOTING:"
          echo "Let's check what's actually in the files..."
          echo ""
          echo "Looking for any 'rebrandking' (any case):"
          find decompiled_apk -name "*.smali" -type f -exec grep -i -H "rebrandking" {} \; 2>/dev/null | head -5 || echo "None found"
          echo ""
          echo "Looking for any 'dynam' (any case):"
          find decompiled_apk -name "*.smali" -type f -exec grep -i -H "dynam" {} \; 2>/dev/null | head -5 || echo "None found"
          echo ""
          echo "Looking for any 'SM4trio' (any case):"
          find decompiled_apk -name "*.smali" -type f -exec grep -i -H "SM4trio" {} \; 2>/dev/null | head -5 || echo "None found"
          echo ""
          echo "Checking if any smali files exist:"
          find decompiled_apk -name "*.smali" -type f | head -5 || echo "No smali files found"
        fi
        
        # Final check for any remaining old URLs
        echo ""
        echo "🔍 Double-checking for remaining old URLs..."
        REMAINING_URL1=$(find decompiled_apk -name "*.smali" -type f -exec grep -c "$URL1" {} \; 2>/dev/null | awk '{sum += $1} END {print sum+0}')
        REMAINING_URL2=$(find decompiled_apk -name "*.smali" -type f -exec grep -c "$URL2" {} \; 2>/dev/null | awk '{sum += $1} END {print sum+0}')
        
        if [ "$REMAINING_URL1" -eq 0 ] && [ "$REMAINING_URL2" -eq 0 ]; then
          echo "✅ Perfect! No remaining old URLs found."
        else
          echo "⚠️  Found $REMAINING_URL1 instances of old URL1 and $REMAINING_URL2 instances of old URL2"
        fi
        
        echo ""
        echo "============================================================"
        echo "CHARACTER-EXACT URL REPLACEMENT COMPLETE"
        echo "============================================================"

    - name: Replace package name in smali files
      run: |
        OLD_PACKAGE="com.dynamic.tv"
        OLD_PACKAGE_B64="Y29tLmR5bmFtaWMudHY="
        NEW_PACKAGE="${{ github.event.inputs.new_package_name }}"
        NEW_PACKAGE_B64=$(echo -n "$NEW_PACKAGE" | base64 -w 0)
        
        echo "Replacing package name:"
        echo "  Old: $OLD_PACKAGE"
        echo "  New: $NEW_PACKAGE"
        
        SMALI_COUNT=$(find decompiled_apk -name "*.smali" -type f | wc -l)
        echo "Processing $SMALI_COUNT smali files..."
        
        # Use more specific sed commands to avoid conflicts
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|L$OLD_PACKAGE|L$NEW_PACKAGE|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|\"$OLD_PACKAGE\"|\"$NEW_PACKAGE\"|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$OLD_PACKAGE_B64|$NEW_PACKAGE_B64|g" {} \;
        
        OLD_PATH=$(echo "$OLD_PACKAGE" | tr '.' '/')
        NEW_PATH=$(echo "$NEW_PACKAGE" | tr '.' '/')
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$OLD_PATH|$NEW_PATH|g" {} \;
        
        if [ -f "decompiled_apk/AndroidManifest.xml" ]; then
          sed -i "s|$OLD_PACKAGE|$NEW_PACKAGE|g" decompiled_apk/AndroidManifest.xml
          echo "Updated AndroidManifest.xml"
        fi
        
        if [ -f "decompiled_apk/apktool.yml" ]; then
          sed -i "s|$OLD_PACKAGE|$NEW_PACKAGE|g" decompiled_apk/apktool.yml
          echo "Updated apktool.yml"
        fi
        
        echo "Package name replacement completed"

    - name: Replace app name in smali files
      run: |
        OLD_APP_NAME="Dynamic TV"
        OLD_APP_NAME_B64="RHluYW1pYyBUVg=="
        NEW_APP_NAME="${{ github.event.inputs.new_app_name }}"
        NEW_APP_NAME_B64=$(echo -n "$NEW_APP_NAME" | base64 -w 0)
        
        echo "Replacing app name:"
        echo "  Old: $OLD_APP_NAME"
        echo "  New: $NEW_APP_NAME"
        
        # Use quotes to ensure exact matches
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|\"$OLD_APP_NAME\"|\"$NEW_APP_NAME\"|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|$OLD_APP_NAME_B64|$NEW_APP_NAME_B64|g" {} \;
        
        STRINGS_COUNT=$(find decompiled_apk -name "strings.xml" -type f | wc -l)
        if [ $STRINGS_COUNT -gt 0 ]; then
          echo "Updating $STRINGS_COUNT strings.xml files..."
          find decompiled_apk -name "strings.xml" -type f -exec sed -i "s|$OLD_APP_NAME|$NEW_APP_NAME|g" {} \;
        fi
        
        if [ -f "decompiled_apk/AndroidManifest.xml" ]; then
          sed -i "s|android:label=\"$OLD_APP_NAME\"|android:label=\"$NEW_APP_NAME\"|g" decompiled_apk/AndroidManifest.xml
          sed -i "s|$OLD_APP_NAME|$NEW_APP_NAME|g" decompiled_apk/AndroidManifest.xml
          echo "Updated AndroidManifest.xml app label"
        fi
        
        echo "App name replacement completed"

    - name: Replace image files
      run: |
        echo "Looking for image files to replace..."
        
        if [ ! -d "images-to-replace" ]; then
          echo "ERROR: images-to-replace directory not found"
          exit 1
        fi
        
        echo "Available replacement images:"
        ls -la images-to-replace/
        
        declare -a images=(
          "banner.png"
          "brick.jpg"
          "full_white_logo.png"
          "ic_launcher.png"
          "launcher_logo.png"
          "logo.png"
          "logo_blue_long.png"
          "logo_greu.png"
          "logo_home.png"
          "logo_placeholder_white.png"
          "logo_watermark.png"
          "logo_white.png"
          "logo_white_long.png"
          "tv_banner.png"
          "your_logo.png"
        )
        
        replaced_count=0
        for image in "${images[@]}"; do
          echo "Processing $image..."
          
          targets=$(find decompiled_apk -name "$image" -type f)
          if [ -n "$targets" ] && [ -f "images-to-replace/$image" ]; then
            echo "$targets" | while read -r target_path; do
              echo "  Replacing: $target_path"
              cp "images-to-replace/$image" "$target_path"
            done
            replaced_count=$((replaced_count + 1))
          elif [ ! -f "images-to-replace/$image" ]; then
            echo "  Source image images-to-replace/$image not found"
          else
            echo "  Target image $image not found in APK"
          fi
        done
        
        echo "Image replacement completed"

    - name: Update package directory structure
      run: |
        echo "Updating package directory structure..."
        
        move_package_structure() {
          local smali_dir=$1
          local old_path="$smali_dir/com/dynamic/tv"
          local new_path="$smali_dir/com/sitv/live"
          
          if [ -d "$old_path" ]; then
            echo "Moving package structure in $smali_dir..."
            mkdir -p "$(dirname "$new_path")"
            mv "$old_path" "$new_path"
            rmdir -p "$smali_dir/com/dynamic" 2>/dev/null || true
            echo "Package structure updated in $smali_dir"
            return 0
          fi
          return 1
        }
        
        moved=false
        
        if move_package_structure "decompiled_apk/smali"; then
          moved=true
        fi
        
        for smali_dir in decompiled_apk/smali_classes*; do
          if [ -d "$smali_dir" ]; then
            if move_package_structure "$smali_dir"; then
              moved=true
            fi
          fi
        done
        
        if [ "$moved" = true ]; then
          echo "Package directory structure updated"
        else
          echo "No package structure changes needed"
        fi

    - name: Fix APK compilation issues
      run: |
        echo "Preparing APK for recompilation..."
        
        cd decompiled_apk
        
        # Fix common apktool compilation issues
        echo "Fixing apktool.yml configuration..."
        if [ -f "apktool.yml" ]; then
          # Ensure proper configuration for recompilation
          sed -i 's/doNotCompress:/# doNotCompress:/g' apktool.yml
          sed -i 's/unknownFiles:/# unknownFiles:/g' apktool.yml
          
          # Add compression settings to avoid issues
          echo "" >> apktool.yml
          echo "# Modified for recompilation" >> apktool.yml
          echo "doNotCompress:" >> apktool.yml
          echo "- resources.arsc" >> apktool.yml
        fi
        
        # Remove any problematic META-INF files
        if [ -d "original/META-INF" ]; then
          echo "Cleaning META-INF directory..."
          rm -rf original/META-INF/*.RSA
          rm -rf original/META-INF/*.SF
          rm -rf original/META-INF/MANIFEST.MF
        fi
        
        cd ..
        echo "APK preparation completed"

    - name: Recompile APK
      run: |
        echo "Recompiling APK..."
        
        # Try recompilation with different options
        if ! apktool b decompiled_apk -o modified_unsigned.apk --use-aapt2; then
          echo "AAPT2 failed, trying with AAPT1..."
          if ! apktool b decompiled_apk -o modified_unsigned.apk; then
            echo "Standard compilation failed, trying without compression..."
            apktool b decompiled_apk -o modified_unsigned.apk --no-crunch
          fi
        fi
        
        if [ ! -f "modified_unsigned.apk" ]; then
          echo "ERROR: APK compilation failed completely"
          echo "Checking decompiled directory structure..."
          ls -la decompiled_apk/
          exit 1
        fi
        
        echo "APK compiled successfully"
        ls -lh modified_unsigned.apk

    - name: Sign APK
      run: |
        echo "Signing APK..."
        
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
          -keystore release-key.keystore -storepass password \
          modified_unsigned.apk alias_name
        
        if [ $? -ne 0 ]; then
          echo "ERROR: APK signing failed"
          exit 1
        fi
        
        zipalign -v 4 modified_unsigned.apk modified_signed_aligned.apk
        
        if [ $? -ne 0 ]; then
          echo "ERROR: APK alignment failed"
          exit 1
        fi
        
        echo "APK signed and aligned successfully"
        ls -lh modified_signed_aligned.apk

    - name: Verify APK
      run: |
        echo "Verifying APK..."
        jarsigner -verify -verbose -certs modified_signed_aligned.apk
        
        if [ $? -eq 0 ]; then
          echo "APK signature verification successful"
        else
          echo "APK signature verification failed, but APK may still be usable"
        fi
        
        echo "APK Information:"
        aapt dump badging modified_signed_aligned.apk | head -10 || echo "Could not get APK info"

    - name: Create output directory and organize files
      run: |
        echo "Organizing output files..."
        mkdir -p output
        cp modified_signed_aligned.apk output/
        cp modified_unsigned.apk output/
        
        cat > output/modification_summary.txt << EOF
        APK Modification Summary
        ========================
        Original APK: ${{ github.event.inputs.apk_file }}
        Modified APK: modified_signed_aligned.apk

        Changes Made:
        - Package Name: com.dynamic.tv → ${{ github.event.inputs.new_package_name }}
        - App Name: Dynamic TV → ${{ github.event.inputs.new_app_name }}
        - Panel URLs: Character-exact URL replacement (/dynam/ → /${{ github.event.inputs.panel_url_value }}/)
        - Images: Replaced with assets from images-to-replace/ folder
        - APK: Recompiled and signed
        - Fixed: Duplicate class issues resolved

        Files Generated:
        - modified_signed_aligned.apk (Ready for installation)
        - modified_unsigned.apk (Unsigned version)

        Generated on: $(date)
        Generated by: GitHub Actions
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        EOF
        
        echo "Files organized in output/ directory:"
        ls -la output/

    - name: Upload modified APK
      uses: actions/upload-artifact@v4
      with:
        name: modified-apk-${{ github.run_number }}
        path: output/
        retention-days: 30

    - name: Show summary
      run: |
        echo "## APK Modification Complete! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changes Made:" >> $GITHUB_STEP_SUMMARY
        echo "- **Original APK:** ${{ github.event.inputs.apk_file }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Name:** com.dynamic.tv → ${{ github.event.inputs.new_package_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **App Name:** Dynamic TV → ${{ github.event.inputs.new_app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Panel URLs:** Character-exact replacement (/dynam/ → /${{ github.event.inputs.panel_url_value }}/)" >> $GITHUB_STEP_SUMMARY
        echo "- **Images:** Replaced with provided assets" >> $GITHUB_STEP_SUMMARY
        echo "- **Fixed:** Duplicate class conflicts resolved" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Output Files:" >> $GITHUB_STEP_SUMMARY
        echo "- **Signed APK:** modified_signed_aligned.apk" >> $GITHUB_STEP_SUMMARY
        echo "- **Unsigned APK:** modified_unsigned.apk" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download:" >> $GITHUB_STEP_SUMMARY
        echo "The modified APK has been uploaded as workflow artifact **modified-apk-${{ github.run_number }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Ready for installation!**" >> $GITHUB_STEP_SUMMARY
