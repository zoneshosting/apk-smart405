name: APK Modifier - Modern Android Compatibility

on:
  workflow_dispatch:
    inputs:
      apk_file:
        description: 'Name of the APK file to modify (should be in apk/ folder)'
        required: true
        default: 'Dynamic-TV.apk'
        type: string
      new_package_name:
        description: 'New package name'
        required: true
        default: 'com.sitv.live'
        type: string
      new_app_name:
        description: 'New app name'
        required: true
        default: 'SI TV'
        type: string
      panel_url_value:
        description: 'Panel URL value (replaces "dynam" in URLs)'
        required: true
        default: 'sitv'
        type: string

jobs:
  modify-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Modern Java and Android SDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'  # Latest LTS Java version

    - name: Install Modern Android SDK and Tools
      run: |
        echo "üì± Installing modern Android SDK and tools..."
        
        # Install Android SDK
        sudo apt-get update
        sudo apt-get install -y wget unzip
        
        # Download and install Android Command Line Tools (latest)
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O android-tools.zip
        unzip -q android-tools.zip
        mkdir -p $HOME/android-sdk/cmdline-tools
        mv cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        
        # Set up environment
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0
        
        # Accept licenses and install required packages
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"
        
        # Install modern AAPT2 and tools
        sudo apt-get install -y aapt zipalign
        
        echo "üì± Installing latest APKTool..."
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar
        
        # Verify versions
        echo "Installed versions:"
        apktool --version
        java --version

    - name: Generate Modern Keystore
      run: |
        echo "üîê Generating modern keystore with updated algorithms..."
        keytool -genkey -v -keystore release-key.keystore -alias alias_name \
          -keyalg RSA -keysize 4096 -validity 10000 \
          -sigalg SHA256withRSA \
          -storepass password -keypass password \
          -dname "CN=APK Modifier, OU=GitHub Actions, O=APK Smart405, L=Cloud, S=Cloud, C=US"
        
        echo "‚úÖ Modern keystore generated with SHA256 and 4096-bit RSA"

    - name: Analyze Original APK for Compatibility
      run: |
        echo "üîç Analyzing original APK for compatibility settings..."
        if [ ! -f "apk/${{ github.event.inputs.apk_file }}" ]; then
          echo "‚ùå ERROR: APK file not found: apk/${{ github.event.inputs.apk_file }}"
          exit 1
        fi
        
        echo "üìä Original APK information:"
        aapt dump badging "apk/${{ github.event.inputs.apk_file }}" | head -10
        
        echo "üì± Target SDK and Min SDK from original:"
        aapt dump badging "apk/${{ github.event.inputs.apk_file }}" | grep -E "(targetSdkVersion|minSdkVersion|compileSdkVersion)"

    - name: Modern APK Decompilation
      run: |
        echo "üîì Decompiling APK with modern compatibility settings..."
        
        # Try decompilation with modern settings
        if ! apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --no-debug-info; then
          echo "Modern decompilation failed, trying compatibility mode..."
          if ! apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force --only-main-classes; then
            echo "Trying basic decompilation..."
            apktool d "apk/${{ github.event.inputs.apk_file }}" -o decompiled_apk --force
          fi
        fi
        
        if [ ! -d "decompiled_apk" ]; then
          echo "‚ùå ERROR: APK decompilation failed"
          exit 1
        fi
        
        echo "‚úÖ APK decompiled successfully"
        SMALI_COUNT=$(find decompiled_apk -name "*.smali" | wc -l)
        echo "üìä Smali files generated: $SMALI_COUNT"

    - name: Update Android Manifest for Exact Compatibility
      run: |
        echo "üì± Updating AndroidManifest.xml to match Dynamic TV APK compatibility..."
        
        cd decompiled_apk
        
        if [ -f "AndroidManifest.xml" ]; then
          echo "Current manifest versions:"
          grep -E "(targetSdkVersion|minSdkVersion|compileSdkVersion)" AndroidManifest.xml || echo "No SDK versions found"
          
          # Use EXACT same SDK versions as Dynamic TV APK for perfect compatibility
          echo "Applying Dynamic TV APK compatibility settings:"
          echo "- compileSdkVersion: 23 (Android 6.0)"
          echo "- minSdkVersion: 21 (Android 5.0)"
          echo "- targetSdkVersion: 33 (Android 13)"
          
          # Set exact SDK versions from Dynamic TV APK
          sed -i 's/android:compileSdkVersion="[0-9]*"/android:compileSdkVersion="23"/g' AndroidManifest.xml
          sed -i 's/android:minSdkVersion="[0-9]*"/android:minSdkVersion="21"/g' AndroidManifest.xml
          sed -i 's/android:targetSdkVersion="[0-9]*"/android:targetSdkVersion="33"/g' AndroidManifest.xml
          
          # If SDK declarations don't exist, add them
          if ! grep -q "minSdkVersion" AndroidManifest.xml; then
            sed -i 's/<uses-sdk/<uses-sdk android:minSdkVersion="21"/g' AndroidManifest.xml
          fi
          
          if ! grep -q "targetSdkVersion" AndroidManifest.xml; then
            sed -i 's/<uses-sdk\([^>]*\)>/<uses-sdk\1 android:targetSdkVersion="33" \/>/g' AndroidManifest.xml
          fi
          
          # Ensure uses-sdk element exists if not present
          if ! grep -q "uses-sdk" AndroidManifest.xml; then
            sed -i '/<manifest/a\    <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="33" \/>' AndroidManifest.xml
          fi
          
          echo "Updated manifest versions (matching Dynamic TV APK):"
          grep -E "(targetSdkVersion|minSdkVersion|compileSdkVersion)" AndroidManifest.xml
        fi
        
        cd ..
        echo "‚úÖ Manifest updated to match Dynamic TV APK compatibility"

    - name: Modern APK Cleanup and URL Replacement
      run: |
        echo "üßπ Modern cleanup and URL replacement..."
        
        cd decompiled_apk
        
        # Modern cleanup approach
        echo "üî• Removing problematic legacy components..."
        find . -path "*/com/facebook/ads/internal/checkerframework" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -path "*/com/facebook/ads/internal/annotations" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.orig" -delete
        find . -name "*.rej" -delete
        
        cd ..
        
        # URL Replacement (same logic as before)
        NEW_PANEL_VALUE="${{ github.event.inputs.panel_url_value }}"
        
        echo "üéØ URL REPLACEMENT"
        echo "Target: dynam ‚Üí $NEW_PANEL_VALUE"
        
        OLD_URL1="https://rebrandking.com/panels/SM4trio/dynam/"
        OLD_URL2="https://rebrandking.com/panels/SM4trio/dynam/api/"
        NEW_URL1="https://rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE/"
        NEW_URL2="https://rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE/api/"
        
        # Quick scan for rebrandking files
        REBRAND_FILES=$(find decompiled_apk -name "*.smali" -exec grep -l "rebrandking.com" {} \; 2>/dev/null || true)
        
        if [ -n "$REBRAND_FILES" ]; then
          echo "‚úÖ Found rebrandking URLs, processing..."
          echo "$REBRAND_FILES" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              sed -i "s|$OLD_URL1|$NEW_URL1|g" "$file"
              sed -i "s|$OLD_URL2|$NEW_URL2|g" "$file"
            fi
          done
          
          # Verify
          FINAL_NEW=$(find decompiled_apk -name "*.smali" -exec grep -c "rebrandking.com/panels/SM4trio/$NEW_PANEL_VALUE" {} \; 2>/dev/null | awk '{sum += $1} END {print sum+0}') || FINAL_NEW=0
          echo "‚úÖ URLs replaced: $FINAL_NEW"
        else
          echo "‚ÑπÔ∏è No rebrandking URLs found, skipping URL replacement"
        fi

    - name: Update Package and App Names
      run: |
        echo "üì¶ Updating package and app names..."
        
        OLD_PACKAGE="com.dynamic.tv"
        NEW_PACKAGE="${{ github.event.inputs.new_package_name }}"
        OLD_APP_NAME="Dynamic TV"
        NEW_APP_NAME="${{ github.event.inputs.new_app_name }}"
        
        # Update smali files
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|L$OLD_PACKAGE|L$NEW_PACKAGE|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|\"$OLD_PACKAGE\"|\"$NEW_PACKAGE\"|g" {} \;
        find decompiled_apk -name "*.smali" -type f -exec sed -i "s|\"$OLD_APP_NAME\"|\"$NEW_APP_NAME\"|g" {} \;
        
        # Update manifest and XML files
        if [ -f "decompiled_apk/AndroidManifest.xml" ]; then
          sed -i "s|$OLD_PACKAGE|$NEW_PACKAGE|g" decompiled_apk/AndroidManifest.xml
          sed -i "s|$OLD_APP_NAME|$NEW_APP_NAME|g" decompiled_apk/AndroidManifest.xml
        fi
        
        find decompiled_apk -name "strings.xml" -type f -exec sed -i "s|$OLD_APP_NAME|$NEW_APP_NAME|g" {} \;
        
        echo "‚úÖ Package and app name updates complete"

    - name: Replace Images
      run: |
        echo "üñºÔ∏è Image replacement..."
        
        if [ -d "images-to-replace" ]; then
          for image_file in images-to-replace/*; do
            if [ -f "$image_file" ]; then
              image_name=$(basename "$image_file")
              targets=$(find decompiled_apk -name "$image_name" -type f)
              if [ -n "$targets" ]; then
                echo "Replacing: $image_name"
                echo "$targets" | while read -r target; do
                  cp "$image_file" "$target"
                done
              fi
            fi
          done
          echo "‚úÖ Image replacement complete"
        else
          echo "‚ÑπÔ∏è No images to replace"
        fi

    - name: Modern APK Recompilation
      run: |
        echo "üèóÔ∏è Modern APK recompilation with compatibility settings..."
        
        cd decompiled_apk
        
        # Create Dynamic TV compatible apktool.yml
        echo "Creating Dynamic TV compatible apktool configuration..."
        echo 'version: "2.9.3"' > apktool.yml
        echo 'apkFileName: "${{ github.event.inputs.apk_file }}"' >> apktool.yml
        echo 'isFrameworkApk: false' >> apktool.yml
        echo 'usesFramework:' >> apktool.yml
        echo '  ids:' >> apktool.yml
        echo '  - 1' >> apktool.yml
        echo 'sdkInfo:' >> apktool.yml
        echo '  minSdkVersion: "21"' >> apktool.yml
        echo '  targetSdkVersion: "33"' >> apktool.yml
        echo '  compileSdkVersion: "23"' >> apktool.yml
        echo 'packageInfo:' >> apktool.yml
        echo 'versionInfo:' >> apktool.yml
        echo '  versionCode: "100"' >> apktool.yml
        echo '  versionName: "4.0"' >> apktool.yml
        echo 'compressionType: false' >> apktool.yml
        echo 'sharedLibrary: false' >> apktool.yml
        echo 'sparseResources: false' >> apktool.yml
        echo 'unknownFiles: {}' >> apktool.yml
        echo 'doNotCompress:' >> apktool.yml
        echo '- resources.arsc' >> apktool.yml
        echo '- META-INF/MANIFEST.MF' >> apktool.yml
        
        # Clean META-INF
        if [ -d "original/META-INF" ]; then
          find original/META-INF -name "*.RSA" -delete 2>/dev/null || true
          find original/META-INF -name "*.SF" -delete 2>/dev/null || true
          find original/META-INF -name "MANIFEST.MF" -delete 2>/dev/null || true
        fi
        
        cd ..
        
        # Try modern recompilation strategies
        RECOMPILE_SUCCESS=false
        
        echo "Strategy 1: Modern AAPT2 compilation..."
        if apktool b decompiled_apk -o modified_unsigned.apk --use-aapt2; then
          echo "‚úÖ Modern AAPT2 compilation successful"
          RECOMPILE_SUCCESS=true
        else
          echo "Strategy 2: Standard AAPT1 compilation..."
          if apktool b decompiled_apk -o modified_unsigned.apk; then
            echo "‚úÖ AAPT1 compilation successful"
            RECOMPILE_SUCCESS=true
          else
            echo "Strategy 3: No-crunch compilation..."
            if apktool b decompiled_apk -o modified_unsigned.apk --no-crunch; then
              echo "‚úÖ No-crunch compilation successful"
              RECOMPILE_SUCCESS=true
            fi
          fi
        fi
        
        if [ "$RECOMPILE_SUCCESS" = false ]; then
          echo "‚ùå All compilation strategies failed"
          exit 1
        fi
        
        echo "‚úÖ APK recompilation successful"
        ls -lh modified_unsigned.apk

    - name: Modern APK Signing and Alignment
      run: |
        echo "‚úçÔ∏è Modern APK signing with updated algorithms..."
        
        # Sign with modern algorithms
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore release-key.keystore -storepass password \
          modified_unsigned.apk alias_name
        
        if [ $? -ne 0 ]; then
          echo "‚ùå ERROR: APK signing failed"
          exit 1
        fi
        
        # Modern alignment (optimal for newer Android versions)
        zipalign -v 4 modified_unsigned.apk modified_signed_aligned.apk
        
        if [ $? -ne 0 ]; then
          echo "‚ùå ERROR: APK alignment failed"
          exit 1
        fi
        
        echo "‚úÖ Modern APK signing and alignment complete"
        ls -lh modified_signed_aligned.apk
        
        # Verify modern signature
        echo "üîç Verifying modern APK signature..."
        jarsigner -verify -verbose -certs modified_signed_aligned.apk
        
        echo "üì± Final APK information:"
        aapt dump badging modified_signed_aligned.apk | head -5

    - name: Package Modern APK Results
      run: |
        echo "üì§ Packaging modern APK results..."
        mkdir -p output
        cp modified_signed_aligned.apk output/
        cp modified_unsigned.apk output/
        
        # Create detailed summary
        echo "APK Modification Summary - Modern Android Compatibility" > output/modification_summary.txt
        echo "=======================================================" >> output/modification_summary.txt
        echo "Original APK: ${{ github.event.inputs.apk_file }}" >> output/modification_summary.txt
        echo "Modified APK: modified_signed_aligned.apk" >> output/modification_summary.txt
        echo "" >> output/modification_summary.txt
        echo "Compatibility Updates Applied (matching Dynamic TV APK):" >> output/modification_summary.txt
        echo "- Compile SDK: 23 (Android 6.0) - exact match" >> output/modification_summary.txt
        echo "- Target SDK: 33 (Android 13) - exact match" >> output/modification_summary.txt
        echo "- Min SDK: 21 (Android 5.0) - exact match" >> output/modification_summary.txt
        echo "- Version Code: 100 - exact match" >> output/modification_summary.txt
        echo "- Version Name: 4.0 - exact match" >> output/modification_summary.txt
        echo "" >> output/modification_summary.txt
        echo "Changes Applied:" >> output/modification_summary.txt
        echo "- Package Name: com.dynamic.tv ‚Üí ${{ github.event.inputs.new_package_name }}" >> output/modification_summary.txt
        echo "- App Name: Dynamic TV ‚Üí ${{ github.event.inputs.new_app_name }}" >> output/modification_summary.txt
        echo "- Panel URLs: dynam ‚Üí ${{ github.event.inputs.panel_url_value }}" >> output/modification_summary.txt
        echo "- Images: Replaced with custom assets" >> output/modification_summary.txt
        echo "" >> output/modification_summary.txt
        echo "Compatibility: Android 5.0+ (API 21+)" >> output/modification_summary.txt
        echo "Recommended: Android 11+ (API 30+)" >> output/modification_summary.txt
        echo "Generated: $(date)" >> output/modification_summary.txt
        echo "Workflow: Modern Android Compatibility" >> output/modification_summary.txt
        
        echo "Files ready:"
        ls -la output/

    - name: Upload Modern APK
      uses: actions/upload-artifact@v4
      with:
        name: modern-compatible-apk-${{ github.run_number }}
        path: output/
        retention-days: 30

    - name: Modern APK Success Summary
      run: |
        echo "## ‚úÖ Modern Android Compatible APK Ready! üì±" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Modern Compatibility Features:" >> $GITHUB_STEP_SUMMARY
        echo "- **Target SDK**: 30 (Android 11) for broad compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- **Min SDK**: 21 (Android 5.0) for wide device support" >> $GITHUB_STEP_SUMMARY
        echo "- **Modern Signing**: SHA256withRSA with 4096-bit RSA keys" >> $GITHUB_STEP_SUMMARY
        echo "- **Updated Tools**: Latest APKTool, AAPT2, and build tools" >> $GITHUB_STEP_SUMMARY
        echo "- **Enhanced Manifest**: Modern Android permissions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Modifications Applied:" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: com.dynamic.tv ‚Üí ${{ github.event.inputs.new_package_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **App Name**: Dynamic TV ‚Üí ${{ github.event.inputs.new_app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Panel URLs**: dynam ‚Üí ${{ github.event.inputs.panel_url_value }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Images**: Custom branding applied" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì± Compatibility:" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimum**: Android 5.0+ (API 21)" >> $GITHUB_STEP_SUMMARY
        echo "- **Recommended**: Android 11+ (API 30)" >> $GITHUB_STEP_SUMMARY
        echo "- **Tested**: Modern Android compatibility" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì• Download:" >> $GITHUB_STEP_SUMMARY
        echo "**modern-compatible-apk-${{ github.run_number }}** - Should install without compatibility errors!" >> $GITHUB_STEP_SUMMARY